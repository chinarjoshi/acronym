#!/usr/bin/python3

import os
import sys
import toml
from collections import defaultdict, Counter

from helpers import *

TOML = '/home/c/projects/acronym/src/data/data.toml'
SH = '/home/c/projects/acronym/src/data/aliases.sh'
FLAGS = '--flags', '--section'
HISTFILE = os.environ.get('HISTFILE', False)

# Parse the arguments, if register then add the word to the json file,
def parse_args():
    with open(TOML) as f:
        aliases = defaultdict(dict, toml.load(f))

    match sys.argv[1:]:
        case ['add', *cmd]:
            for segment in ' '.join(cmd).split(','):
                cmd = [w.strip(' \'"') for w in segment.split() if w not in FLAGS]

                section = cmd[0]
                if 'sudo' in cmd:
                    section = cmd[1]
                if 'under' in cmd:
                    section = cmd[cmd.index('under') + 1]
                    cmd = cmd[:cmd.index('under')]

                if 'as' in cmd:
                    i = cmd.index('as')
                    short = cmd[i + 1]
                    cmd = cmd[:i]
                else:
                    filtered = [w for w in cmd if w != 'sudo']
                    short = acronymize(filtered, use_flags='--flags' in segment)

                ac = Acronym(cmd, ' '.join(cmd), short, section)
                values = {k for x in aliases.values() for k in x}

                resolve_collisions(aliases, values, ac)
                print(f"'{ac.cmd_str}' -> {short}")

        case ['rm', *names]:
            filtered = [w for w in names if w not in FLAGS]
            if '--section' in names:
                for name in filtered:
                    if not aliases.pop(name, False):
                        print(f"Category '{name}' not found.")
            else:
                for name in filtered:
                    if not any(prefix.pop(name, False) for prefix in aliases.values() if name in prefix):
                        print(f"Alias '{name}' not found.")
            
            aliases = {k: v for k, v in aliases.items() if v}

        case ['suggest']:
            with open(HISTFILE) as f:
                history = Counter([line[15:-1] for line in f.readlines()[:500]])

            def recc_engine(s: str) -> int:
                return (len(s) * 2) ** 3 \
                    + (history[s] if history[s] < 20 else 20) * 2 \
                    * (0 if len(s) < 5 or history[s] < 5 else 1)
            
            print('Your most common commands with the default alias reccomended:')
            for i, command in enumerate(sorted(history, key=recc_engine)[:10]):
                print(f"{i + 1}. '{command}'  ->  '{acronymize(command.split())}'")


        case ['print', *prefixes] if prefixes:
            print('\n' + toml.dumps({k: v for k, v in aliases.items() if k in prefixes}))

        case ['print']:
            print('\n' + toml.dumps(aliases))

        case [('help' | '-h' | '--help')]:
            print_help()

        case [*_]:
            print('Incorrect usage')
            print_help()


    with open(TOML, 'w') as j, open(SH, 'w') as s:
        toml.dump(aliases, j)
        s.write(generate_aliases(aliases))


if __name__ == "__main__":
    parse_args()
